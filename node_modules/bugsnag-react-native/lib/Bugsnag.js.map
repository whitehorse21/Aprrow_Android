{"version":3,"sources":["../src/Bugsnag.js"],"names":[],"mappings":"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","file":"Bugsnag.js","sourcesContent":["import { NativeModules } from 'react-native';\n\nconst NativeClient = NativeModules.BugsnagReactNative;\n\nconst BREADCRUMB_MAX_LENGTH = 30;\n\n/**\n * A Bugsnag monitoring and reporting client\n */\nexport class Client {\n\n  /**\n   * Creates a new Bugsnag client\n   */\n  constructor(apiKeyOrConfig) {\n    if (typeof apiKeyOrConfig === 'string' || typeof apiKeyOrConfig === 'undefined') {\n      this.config = new Configuration(apiKeyOrConfig);\n    } else if (apiKeyOrConfig instanceof Configuration) {\n      this.config = apiKeyOrConfig;\n    } else {\n      throw new Error('Bugsnag: A client must be constructed with an API key or Configuration');\n    }\n\n    if (NativeClient) {\n      NativeClient.startWithOptions(this.config.toJSON());\n      this.handleUncaughtErrors();\n      if (this.config.handlePromiseRejections)\n        this.handlePromiseRejections();\n    } else {\n      throw new Error('Bugsnag: No native client found. Is BugsnagReactNative installed in your native code project?');\n    }\n  }\n\n  /**\n   * Registers a global error handler which sends any uncaught error to\n   * Bugsnag before invoking the previous handler, if any.\n   */\n  handleUncaughtErrors = () => {\n    if (ErrorUtils) {\n      const previousHandler = ErrorUtils.getGlobalHandler();\n\n      ErrorUtils.setGlobalHandler((error, isFatal) => {\n        if (this.config.autoNotify && this.config.shouldNotify()) {\n          this.notify(error, report => {report.severity = 'error'}, !!NativeClient.notifyBlocking, (queued) => {\n            if (previousHandler) {\n              previousHandler(error, isFatal);\n            }\n          });\n        } else if (previousHandler) {\n          previousHandler(error, isFatal);\n        }\n      });\n    }\n  }\n\n  handlePromiseRejections = () => {\n    const tracking = require('promise/setimmediate/rejection-tracking'),\n          client = this;\n    tracking.enable({\n      allRejections: true,\n      onUnhandled: function(id, error) { client.notify(error); },\n      onHandled: function() {}\n    });\n  }\n\n  /**\n   * Sends an error report to Bugsnag\n   * @param error               The error instance to report\n   * @param beforeSendCallback  A callback invoked before the report is sent\n   *                            so additional information can be added\n   * @param blocking            When true, blocks the native thread execution\n   *                            until complete. If unspecified, sends the\n   *                            request asynchronously\n   * @param postSendCallback    Callback invoked after request is queued\n   */\n  notify = async (error, beforeSendCallback, blocking, postSendCallback) => {\n    if (!(error instanceof Error)) {\n      console.warn('Bugsnag could not notify: error must be of type Error');\n      if (postSendCallback)\n        postSendCallback(false);\n      return;\n    }\n    if (!this.config.shouldNotify()) {\n      if (postSendCallback)\n        postSendCallback(false);\n      return;\n    }\n\n    const report = new Report(this.config.apiKey, error);\n    report.addMetadata('app', 'codeBundleId', this.config.codeBundleId);\n\n    for (callback of this.config.beforeSendCallbacks) {\n      if (callback(report, error) === false) {\n        if (postSendCallback)\n          postSendCallback(false);\n        return;\n      }\n    }\n    if (beforeSendCallback) {\n      beforeSendCallback(report);\n    }\n\n    if (blocking) {\n      NativeClient.notifyBlocking(report.toJSON(), blocking, postSendCallback);\n    } else {\n      NativeClient.notify(report.toJSON());\n      if (postSendCallback)\n        postSendCallback(true);\n    }\n  }\n\n  setUser = (id, name, email) => {\n    NativeClient.setUser({id, name, email});\n  }\n\n  /**\n   * Clear custom user data and reset to the default device identifier\n   */\n  clearUser = () => {\n    NativeClient.clearUser();\n  }\n\n  /**\n   * Leaves a 'breadcrumb' log message. The most recent breadcrumbs\n   * are attached to subsequent error reports.\n   */\n  leaveBreadcrumb = (name, metadata) => {\n    if (typeof name !== 'string') {\n      console.warn(`Breadcrumb name must be a string, got '${name}'. Discarding.`);\n      return;\n    }\n\n    if (name.length > BREADCRUMB_MAX_LENGTH) {\n      console.warn(`Breadcrumb name exceeds ${BREADCRUMB_MAX_LENGTH} characters (it has ${name.length}): ${name}. It will be truncated.`);\n    }\n\n    // Checks for both `null` and `undefined`.\n    if (metadata == undefined) {\n      metadata = {};\n    } else if (typeof metadata === 'string') {\n      metadata = { 'message': metadata };\n    } else if (typeof metadata !== 'object') {\n      console.warn(`Breadcrumb metadata must be an object or string, got '${metadata}'. Discarding metadata.`);\n      metadata = {};\n    }\n\n    let type = metadata['type'] || 'manual';\n    const breadcrumbMetaData = { ...metadata };\n    delete breadcrumbMetaData['type'];\n\n    NativeClient.leaveBreadcrumb({\n      name,\n      type,\n      metadata: typedMap(breadcrumbMetaData)\n    });\n  }\n}\n\n/**\n * Configuration options for a Bugsnag client\n */\nexport class Configuration {\n\n  constructor(apiKey) {\n    const metadata = require('../package.json');\n    this.version = metadata['version'];\n    this.apiKey = apiKey;\n    this.delivery = new StandardDelivery();\n    this.beforeSendCallbacks = [];\n    this.notifyReleaseStages = undefined;\n    this.releaseStage = undefined;\n    this.appVersion = undefined;\n    this.codeBundleId = undefined;\n    this.autoNotify = true;\n    this.handlePromiseRejections = !__DEV__; // prefer banner in dev mode\n  }\n\n  /**\n   * Whether reports should be sent to Bugsnag, based on the release stage\n   * configuration\n   */\n  shouldNotify = () => {\n    return !this.releaseStage ||\n      !this.notifyReleaseStages ||\n      this.notifyReleaseStages.includes(this.releaseStage);\n  }\n\n  /**\n   * Adds a function which is invoked after an error is reported but before\n   * it is sent to Bugsnag. The function takes a single parameter which is\n   * an instance of Report.\n   */\n  registerBeforeSendCallback = (callback) => {\n    this.beforeSendCallbacks.push(callback)\n  }\n\n  /**\n   * Remove a callback from the before-send pipeline\n   */\n  unregisterBeforeSendCallback = (callback) => {\n    const index = this.beforeSendCallbacks.indexOf(callback);\n    if (index != -1) {\n      this.beforeSendCallbacks.splice(index, 1);\n    }\n  }\n\n  /**\n   * Remove all callbacks invoked before reports are sent to Bugsnag\n   */\n  clearBeforeSendCallbacks = () => {\n    this.beforeSendCallbacks = []\n  }\n\n  toJSON = () => {\n    return {\n      apiKey: this.apiKey,\n      codeBundleId: this.codeBundleId,\n      releaseStage: this.releaseStage,\n      notifyReleaseStages: this.notifyReleaseStages,\n      endpoint: this.delivery.endpoint,\n      appVersion: this.appVersion,\n      version: this.version\n    };\n  }\n}\n\nexport class StandardDelivery {\n\n  constructor(endpoint) {\n    this.endpoint = endpoint || 'https://notify.bugsnag.com';\n  }\n}\n\n/**\n * A report generated from an error\n */\nexport class Report {\n\n  constructor(apiKey, error) {\n    this.apiKey = apiKey;\n    this.errorClass = error.constructor.name;\n    this.errorMessage = error.message;\n    this.context = undefined;\n    this.groupingHash = undefined;\n    this.metadata = {};\n    this.severity = 'warning';\n    this.stacktrace = error.stack;\n    this.user = {};\n  }\n\n  /**\n   * Attach additional diagnostic data to the report. The key/value pairs\n   * are grouped into sections.\n   */\n  addMetadata = (section, key, value) => {\n    if (!this.metadata[section]) {\n      this.metadata[section] = {};\n    }\n    this.metadata[section][key] = value;\n  }\n\n  toJSON = () => {\n    return {\n      apiKey: this.apiKey,\n      context: this.context,\n      errorClass: this.errorClass,\n      errorMessage: this.errorMessage,\n      groupingHash: this.groupingHash,\n      metadata: typedMap(this.metadata),\n      severity: this.severity,\n      stacktrace: this.stacktrace,\n      user: this.user\n    }\n  }\n}\n\nconst allowedMapObjectTypes = ['string', 'number', 'boolean'];\n\n/**\n * Convert an object into a structure with types suitable for serializing\n * across to native code.\n */\nconst typedMap = function(map) {\n  const output = {};\n  for (const key in map) {\n    if (!{}.hasOwnProperty.call(map, key)) continue;\n\n    const value = map[key];\n\n    // Checks for `null`, NaN, and `undefined`.\n    if (value == undefined || isNaN(value)) {\n      output[key] = {type: 'string', value: String(value)}\n    } else if (typeof value === 'object') {\n      output[key] = {type: 'map', value: typedMap(value)};\n    } else {\n      const type = typeof value;\n      if (allowedMapObjectTypes.includes(type)) {\n        output[key] = {type: type, value: value};\n      } else {\n        console.warn(`Could not serialize breadcrumb data for '${key}': Invalid type '${type}'`);\n      }\n    }\n  }\n  return output;\n}\n"]}