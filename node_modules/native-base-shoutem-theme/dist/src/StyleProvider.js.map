{"version":3,"sources":["../../src/StyleProvider.js"],"names":["StyleProvider","props","context","state","theme","createTheme","nextProps","style","setState","children","only","Component","propTypes","element","isRequired","object","defaultProps","childContextTypes"],"mappings":"ujBAAA,4B;AACA,qC;AACA,8B;AACA,gE;;;;;AAKqBA,a;;;;;;;;;;;;;;AAcnB,uBAAYC,KAAZ,CAAmBC,OAAnB,CAA4B;AACpBD,KADoB,CACbC,OADa;AAE1B,MAAKC,KAAL,CAAa;AACXC,MAAO,MAAKC,WAAL,CAAiBJ,KAAjB,CADI,CAAb,CAF0B;;AAK3B,C;;AAEiB;AAChB,MAAO;AACLG,MAAO,KAAKD,KAAL,CAAWC,KADb,CAAP;;AAGD,C;;AAEyBE,S,CAAW;AACnC,GAAIA,UAAUC,KAAV,GAAoB,KAAKN,KAAL,CAAWM,KAAnC,CAA0C;AACxC,KAAKC,QAAL,CAAc;AACZJ,MAAO,KAAKC,WAAL,CAAiBC,SAAjB,CADK,CAAd;;AAGD;AACF,C;;AAEWL,K,CAAO;AACjB,MAAO,qBAAUA,MAAMM,KAAhB,CAAP;AACD,C;;AAEQ;AACCE,QADD,CACc,KAAKR,KADnB,CACCQ,QADD;;AAGP,MAAO,iBAASC,IAAT,CAAcD,QAAd,CAAP;AACD,C,2BA3CwC,gBAAME,S,EAA5BX,a,CACZY,S,CAAY,CACjBH,SAAU,oBAAUI,OAAV,CAAkBC,UADX,CAEjBP,MAAO,oBAAUQ,MAFA,C,CADAf,a,CAMZgB,Y,CAAe,CACpBT,MAAO,EADa,C,CANHP,a,CAUZiB,iB,CAAoB,CACzBb,MAAO,kBAAWU,UADO,C,iBAVRd,a","file":"StyleProvider.js","sourcesContent":["import React, { Children } from 'react';\nimport PropTypes from 'prop-types';\nimport Theme, { ThemeShape } from './Theme';\nimport normalizeStyle from './StyleNormalizer/normalizeStyle';\n\n/**\n *  Provides a theme to child components trough context.\n */\nexport default class StyleProvider extends React.Component {\n  static propTypes = {\n    children: PropTypes.element.isRequired,\n    style: PropTypes.object,\n  };\n\n  static defaultProps = {\n    style: {},\n  };\n\n  static childContextTypes = {\n    theme: ThemeShape.isRequired,\n  };\n\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      theme: this.createTheme(props),\n    };\n  }\n\n  getChildContext() {\n    return {\n      theme: this.state.theme,\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.style !== this.props.style) {\n      this.setState({\n        theme: this.createTheme(nextProps),\n      });\n    }\n  }\n\n  createTheme(props) {\n    return new Theme(props.style);\n  }\n\n  render() {\n    const { children } = this.props;\n\n    return Children.only(children);\n  }\n}\n"]}