// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TabBarBottom renders successfully 1`] = `
<View
  loaded={
    Array [
      0,
    ]
  }
  onLayout={[Function]}
  style={
    Array [
      Object {
        "flex": 1,
        "overflow": "hidden",
      },
      Object {
        "flex": 1,
      },
    ]
  }
>
  <View
    collapsable={undefined}
    style={undefined}
  >
    <View
      collapsable={undefined}
      onLayout={[Function]}
      style={
        Object {
          "backgroundColor": "#F7F7F7",
          "borderTopColor": "rgba(0, 0, 0, .3)",
          "borderTopWidth": 0.5,
          "flexDirection": "row",
          "height": 49,
          "paddingBottom": 0,
          "paddingLeft": 0,
          "paddingRight": 0,
          "paddingTop": 0,
        }
      }
    >
      <View
        accessibilityComponentType={undefined}
        accessibilityLabel={undefined}
        accessibilityTraits={undefined}
        accessible={true}
        collapsable={undefined}
        hitSlop={undefined}
        nativeID={undefined}
        onLayout={undefined}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "alignItems": "center",
            "backgroundColor": "rgba(0, 0, 0, 0)",
            "flex": 1,
          }
        }
        testID={undefined}
      >
        <View
          style={
            Array [
              Object {
                "alignItems": "center",
                "flex": 1,
              },
              Object {
                "flexDirection": "column",
                "justifyContent": "flex-end",
              },
              undefined,
            ]
          }
        >
          <View
            style={
              Object {
                "flexGrow": 1,
              }
            }
          >
            <View
              collapsable={undefined}
              style={
                Object {
                  "alignItems": "center",
                  "bottom": 0,
                  "justifyContent": "center",
                  "left": 0,
                  "opacity": 1,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                }
              }
            />
            <View
              collapsable={undefined}
              style={
                Object {
                  "alignItems": "center",
                  "bottom": 0,
                  "justifyContent": "center",
                  "left": 0,
                  "opacity": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                }
              }
            />
          </View>
          <Text
            accessible={true}
            allowFontScaling={true}
            collapsable={undefined}
            ellipsizeMode="tail"
            style={
              Object {
                "backgroundColor": "transparent",
                "color": "rgba(52, 120, 246, 1)",
                "fontSize": 10,
                "marginBottom": 1.5,
                "textAlign": "center",
              }
            }
          >
            s1
          </Text>
        </View>
      </View>
    </View>
  </View>
  <RCTScrollView
    DEPRECATED_sendUpdatedChildFrames={false}
    alwaysBounceHorizontal={false}
    alwaysBounceVertical={false}
    automaticallyAdjustContentInsets={false}
    bounces={false}
    contentContainerStyle={
      Object {
        "flex": 1,
      }
    }
    contentOffset={
      Object {
        "x": 0,
        "y": 0,
      }
    }
    directionalLockEnabled={true}
    horizontal={true}
    keyboardDismissMode="on-drag"
    keyboardShouldPersistTaps="always"
    onContentSizeChange={null}
    onMomentumScrollBegin={[Function]}
    onMomentumScrollEnd={[Function]}
    onResponderGrant={[Function]}
    onResponderReject={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={undefined}
    onResponderTerminationRequest={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    onScrollShouldSetResponder={[Function]}
    onStartShouldSetResponder={[Function]}
    onStartShouldSetResponderCapture={[Function]}
    onTouchCancel={[Function]}
    onTouchEnd={[Function]}
    onTouchMove={[Function]}
    onTouchStart={[Function]}
    overScrollMode="never"
    pagingEnabled={true}
    scrollEnabled={undefined}
    scrollEventThrottle={1}
    scrollsToTop={false}
    sendMomentumEvents={true}
    showsHorizontalScrollIndicator={false}
    style={
      Array [
        Object {
          "flexDirection": "row",
          "flexGrow": 1,
          "flexShrink": 1,
          "overflow": "scroll",
        },
        Object {
          "flex": 1,
        },
      ]
    }
  >
    <RCTScrollContentView
      collapsable={false}
      removeClippedSubviews={undefined}
      style={
        Array [
          Object {
            "flexDirection": "row",
          },
          Object {
            "flex": 1,
          },
        ]
      }
    >
      <View
        style={
          Object {
            "flex": 1,
            "overflow": "hidden",
          }
        }
        testID={undefined}
      >
        <View
          style={
            Object {
              "flex": 1,
              "overflow": "hidden",
            }
          }
        >
          <View
            navigation={
              Object {
                "addListener": [Function],
                "dispatch": undefined,
                "goBack": [Function],
                "navigate": [Function],
                "pop": [Function],
                "popToTop": [Function],
                "push": [Function],
                "replace": [Function],
                "setParams": [Function],
                "state": Object {
                  "key": "s1",
                  "routeName": "s1",
                },
              }
            }
            screenProps={undefined}
          />
        </View>
      </View>
    </RCTScrollContentView>
  </RCTScrollView>
</View>
`;
